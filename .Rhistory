setwd("/Users/Johnny/Downloads/Peer Assessment 1 for Reproducible Research")
wd
pwd()
dirwd()
wd()
df <- read.csv(activity.csv)
df <- read.csv(file = "activity.csv")
head(df)
str(df)
table(df)
df
str(df)
as.Date(df$date,"%Y-%m-%d")
df <- read.csv(file = "activity.csv")
df$date <- as.Date(df$date,"%Y-%m-%d")
df$date <- as.Date(df$date,"%Y-%m-%d")
str(df)
aggregate(df$steps ~ df$date, sum)
aggregate(steps ~ date, df, sum)
steps_per_day <- aggregate(steps ~ date, df, sum)
hist(steps_per_day)
str(steps_per_day)
hist(rnrom(10))
hist(nrom(10))
hist(rep(1,10))
rep(1,10)
hist(x = steps_per_day$date, y = steps_per_day$steps)
steps_per_day <- aggregate(steps ~ date, df, sum)
g <- ggplot(steps_per_day, aes(x = date))
library(ggplot2)
steps_per_day <- aggregate(steps ~ date, df, sum)
g <- ggplot(steps_per_day, aes(x = date))
g + geom_histogram(aes(weight = steps), binwidth = 1, color = "black", fill="darkblue") +
ggtitle("The total number of steps taken each day") + ylab("Steps")
print
head(steps_per_day)
plot(steps_per_day)
?hist
hist(steps_per_day)
hist(steps_per_day$date)
plot(steps_per_day)
hist(steps_per_day)
Mean <- mean(steps_per_day$steps)
Mnea
Mean
head(df)
table(df$interval)
aggregate(steps ~ interval, df, mean)
avg_steps <- aggregate(steps ~ interval, df, mean)
## Plot
g <- ggplot(avg_steps, aes(x = interval, y = steps))
g + geom_line(color = "darkblue", lwd=0.7) + ggtitle("The average daily activity pattern")
max_interval <- avg_steps$interval[which.max(avg.steps$steps)]
max_interval <- avg_steps$interval[which.max(avg_steps$steps)]
The 5-minute interval, that contains the maximum average number of steps, is `r max.interval`.
avg_steps <- aggregate(steps ~ interval, df, mean)
## Plot
g <- ggplot(avg_steps, aes(x = interval, y = steps))
g + geom_line(color = "darkblue", lwd=0.7) + ggtitle("The average daily activity pattern")
# Interval with max average steps
max_interval <- avg_steps$interval[which.max(avg_steps$steps)]
aggregate(steps ~ interval, df, mean
)
max_interval
complete.cases(df)
Complete <- complete.cases(df)
Missing_Value <- sum(!complete)
Complete <- complete.cases(df)
Missing_Value <- sum(!Complete)
complete.cases(df)\
Missing_Value
avg_steps <- aggregate(steps ~ interval, df, mean)
avg_steps
head(df)
head(avg_steps)
avg_steps$steps <-  round(avg_steps$steps)
avg_steps
df
df
head(df)
avg_steps
head(avg_steps)
avg_steps[1]
avg_steps[1,2]
avg_steps[1,1]
avg_steps[0,1]
avg_steps[1,2]
avg_steps[1,3]
avg_steps[1,2]
avg_steps[1,1]
avg_steps[1,0]
head(df)
head(avg_steps)
avg_steps[1,0]
avg_steps[1,1]
avg_steps[1,2]
avg_steps[2,1]
avg_steps
df
str(df)
nrows(df)
nrow(df)
head(df)
df[1,1]
df[1,2]
df[1,3]
if df[1,1] == NA
if (df[1,1] == NA)
)
df[1,1] == NA
df[1,1] == "NA"
df[1,2] == "NA"
df[1,2] == NA
for (i in 1:nrow(df)) {
if (df[i,1] == NA) {
print("!!!")
}
}
for (i in 1:nrow(df)) {
if (df[i,1] != NA) {
print("!!!")
}
}
for (i in 1:nrow(df)) {
if (df[i,1] !NA) {
print("!!!")
}
}
for (i in 1:nrow(df)) {
if (df[i,1] != 1) {
print("!!!")
}
}
df[1,1]
df[1,1] == NA
df[1,1] != NA
for (i in 1:3) {
if (is.na(df[i,1]) {
print("!!!")
}
}
for (i in 1:3) {
if (is.na(df[i,1]) {
print("!!!")
}
}
head(df)
df[1,1]
df[2,1]
df[3,1]
df[4,2]
for (i in 1:3) {
if (is.na(df[i,1]) {
print("!!!")
}
}
for (i in 1:2) {
if (is.na(df[i,1]) {
print("!!!")
}
}
for (i in 1:2) {
if (is.na(df[i,1]){print("!!!")}
}
for (i in 1:2) {
if (is.na(df[i,1])print("!!!")
}
for (i in 1:2) {
if (is.na(df[i,1])
}
for (i in 1:2) {
#if (is.na(df[i,1])
print(i)
}
for (i in 1:2) {
if (is.na(df[i,1]){
print(i)
}
}
for (i in 1:2) {
if (!is.na(df[i,1]) {
print(i)
}
}
for(i in 1:3){
if(is.na(df[i,1]){
print(i)
}
}
for(i in 1:3){
if(is.na(df[i,1]){
print(i)
} else {
print("N")
}
}
for(i in 1:3){
if(is.na(df[i,1]){
print(i)
} else {
print("N")
}
}
for(i in 1:3){
if(!is.na(df[i,1]){
print(i)
} else {
print("N")
}
}
is.na(df[1,1])
for(i in 1:3){
if(is.na(df[1,1])){
print(i)
} else {
print("N")
}
}
for(i in 1:3){
if(is.na(df[i,1])){
print(i)
} else {
print("N")
}
}
for(i in 1:3){
if(is.na(df[i,1])){
print(i)
}
}
avg_steps
for(i in 1:3){
if(is.na(df[i,1])){
print(df[i,3])
}
}
avg_steps[1,1]
avg_steps[2,1]
avg_steps
for(i in 1:3){
if (is.na(df[i,1])){
if (df[i,3] == 0) {
print(avg_steps(1,2))
} else {
print(avg_steps(df[i,3]/5 +1,2))
}
}
}
for(i in 1:3){
if (is.na(df[i,1])){
if (df[i,3] == 0) {
print(avg_steps[1,2])
} else {
print(avg_steps[df[i,3]/5 +1,2])
}
}
}
df1 <- df
df1
for(i in 1:3){
if (is.na(df[i,1])){
if (df[i,3] == 0) {
df1[i,1] <- avg_steps[1,2])
} else {
df1[i,1] <- (avg_steps[df[i,3]/5 +1,2])
}
}
}
for(i in 1:3){
if (is.na(df[i,1])){
if (df[i,3] == 0) {
df1[i,1] <- avg_steps[1,2]
} else {
df1[i,1] <- avg_steps[df[i,3]/5 +1,2]
}
}
}
df1
avg_steps[df[3,3]/5 +1,2]
head(df)
head(df1)
```{r Mean_median_filled_data, echo=TRUE}
df_new <- df
for(i in 1:nrow(df)) {
# check if steps equal to NA, if TRUE, fill in data mean for that 5-minute interval
if (is.na(df[i,1])) {
if (df[i,3] == 0) {
df_new[i,1] <- avg_steps[1,2]
} else {
df_new[i,1] <- avg_steps[df[i,3]/5 +1,2]
}
}
}
```
df_new
dim(df)
dim(avg_steps)
avg_steps
avg_steps[which(avg_steps$interval == 2350)]
avg_steps[which(avg_steps$interval == 2350),]
head(df1)
for(i in 1:5) {
# check if steps equal to NA, if TRUE, fill in data mean for that 5-minute interval
if (is.na(df[i,1])) {
df_new[i,1] <- avg_steps[which(avg_steps$interval == df[i,3]),2]
}
}
df_new
head(df_new)
df_nw
df_new
df_new <- df
for(i in 1:nrow(df)) {
# check if steps equal to NA, if TRUE, fill in data mean for that 5-minute interval
if (is.na(df[i,1])) {
df_new[i,1] <- avg_steps[which(avg_steps$interval == df[i,3]),2]
}
}
df_nw
df_new
df_new <- df
for(i in 1:nrow(df)) {
# check if steps equal to NA, if TRUE, fill in data mean for that 5-minute interval
if (is.na(df[i,1])) {
df_new[i,1] <- avg_steps[which(avg_steps$interval == df[i,3]),2]
}
}
g <- ggplot(steps_per_day_new, aes(x = date))
steps_per_day_new <- aggregate(steps ~ date, df_new, sum)
g <- ggplot(steps_per_day_new, aes(x = date))
g + geom_histogram(aes(weight = steps), binwidth = 1, color = "black", fill="darkblue") +
ggtitle("The total number of steps taken each day\nfor the filled data") + ylab("Steps")
The mean total number of steps taken per day for the filled data is `r Mean_new`.
The median total number of steps taken per day for the filled data is `r Median_new`.
Mean_new <- mean(steps_per_day_new$steps)
Median_new <- median(steps_per_day_new$steps)
isWeekday
isWeekday(x, wday = 1:5)
weekdays(df[1,2])
weekdays?
?
)
?weekdays
weekdays(df[1,2]，abbreviate = FALSE)
weekdays(df[1,2]，abbreviate = FALSE)
weekdays(df[1,2],abbreviate = FALSE)
weekdays(df[1,2],abbreviate = TRUE)
for(i in 1:10) {
if (weekdays(df[i,2]) %in% c("Sunday", "Saturday")) {
pring("!")
# df_new[i,1] <- avg_steps[which(avg_steps$interval == df[i,3]),2]
}
}
for(i in 1:100) {
if (weekdays(df[i,2]) %in% c("Sunday", "Saturday")) {
pring("!")
# df_new[i,1] <- avg_steps[which(avg_steps$interval == df[i,3]),2]
}
}
for(i in 1:100) {
if (weekdays(df[i,2]) %in% c("Sunday", "Saturday")) {
pring("!")
# df_new[i,1] <- avg_steps[which(avg_steps$interval == df[i,3]),2]
} else {
print("N")
}
}
for(i in 1:nrow(df_week)) {
if (weekdays(df_week[i,2]) %in% c("Sunday", "Saturday")) {
df_week$weekday <- "Weekday"
} else {
df_week$weekday <- "Weekend"
}
}
df_week <- df
for(i in 1:nrow(df_week)) {
if (weekdays(df_week[i,2]) %in% c("Sunday", "Saturday")) {
df_week$weekday <- "Weekday"
} else {
df_week$weekday <- "Weekend"
}
}
weekdays(df[1,2],abbreviate = TRUE)
df_week
weekdays(df[1,2],abbreviate = TRUE)
df_week <- df
for(i in 1:nrow(df_week)) {
if (weekdays(df_week[i,2]) %in% c("Sunday", "Saturday")) {
df_week$weekday[i,4] <- "Weekday"
} else {
df_week$weekday[i,4] <- "Weekend"
}
}
tmp <- data.frame()
tmp
tmp <- rbind(tmp, c("test"))
tmp
tmp <- rbind(tmp, c("test"))
tmp <- rbind(tmp, c("test"))
tmp <- rbind(tmp, c("test"))
tmp
names(tmp) <- "WEEK"
tmp
tmp <- data.frame()
df_week <- df
tmp <- data.frame()
for(i in 1:nrow(df_week)) {
if (weekdays(df_week[i,2]) %in% c("Sunday", "Saturday")) {
tmp <- rbind(tmp, c("Weekend"))
} else {
tmp <- rbind(tmp, c("Weekday"))
}
}
df_week <- df
tmp <- data.frame()
for(i in 1:3) {
if (weekdays(df_week[i,2]) %in% c("Sunday", "Saturday")) {
tmp <- rbind(tmp, c("Weekend"))
} else {
tmp <- rbind(tmp, c("Weekday"))
}
}
df_week$Week <- tmp
df_week <- df
tmp <- data.frame()
for(i in 1:3) {
if (weekdays(df_week[i,2]) %in% c("Sunday", "Saturday")) {
tmp <- rbind(tmp, c("Weekend"))
} else {
tmp <- rbind(tmp, c("Weekday"))
}
}
tmp
df_week <- df
tmp <- data.frame()
for(i in 1:nrow(df_week)) {
if (weekdays(df_week[i,2]) %in% c("Sunday", "Saturday")) {
tmp <- rbind(tmp, c("Weekend"))
} else {
tmp <- rbind(tmp, c("Weekday"))
}
}
df_week <- df
tmp <- data.frame()
for(i in 1:5) {
if (weekdays(df_week[i,2]) %in% c("Sunday", "Saturday")) {
tmp <- rbind(tmp, c("Weekend"))
} else {
tmp <- rbind(tmp, c("Weekday"))
}
}
df
tmp
df_week <- df
tmp <- data.frame()
for(i in 1:nrows(df_week)) {
if (weekdays(df_week[i,2]) %in% c("Sunday", "Saturday")) {
tmp <- rbind(tmp, c("Weekend"))
} else {
tmp <- rbind(tmp, c("Weekday"))
}
}
df_week <- df
tmp <- data.frame()
for(i in 1:nrow(df_week)) {
if (weekdays(df_week[i,2]) %in% c("Sunday", "Saturday")) {
tmp <- rbind(tmp, c("Weekend"))
} else {
tmp <- rbind(tmp, c("Weekday"))
}
}
df_week
df_week$Week <- weekdays(df_week$date)
df_week
tail(df_week)
